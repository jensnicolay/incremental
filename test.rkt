#lang racket

(require "ast.rkt")
(require "machine.rkt")
(require "lattice.rkt")

;(parameterize-full-debug!)

(define (test-machine e expected)
  (let ((result
            (with-handlers ((exn:fail?
                             (lambda (exc) (if (eq? expected 'FAIL)
                                             'FAIL
                                             (begin
                                               (printf "unexpected failure for ~a:\n" e)
                                               (raise exc))))))
              (conc-eval (compile e)))))
         (unless (equal? result expected)
           (error (format "wrong result for ~a:\n\texpected ~a\n\tgot      ~a" e expected result)))))

(define start-time (current-milliseconds))
(test-machine '123 123)
(test-machine '(let ((x 10)) x) 10)
(test-machine '(let ((x 10)) (let ((y 20)) y)) 20)
(test-machine '(let ((x 10)) (let ((y 20)) x)) 10)
(test-machine '(let ((x 10)) (let ((x 20)) x)) 20)
(test-machine '(let ((x 123)) (let ((u (let ((x #f)) "dummy"))) x)) 123)
(test-machine '(let ((x 123)) (let ((u (let ((y "dummy")) (let ((x #f)) "dummy2")))) x)) 123)

(test-machine '(+ 1 1) 2)
(test-machine '(let ((x (+ 1 1))) x) 2)
(test-machine '(let ((x (let ((z 3)) z))) x) 3)
(test-machine '(let ((f (lambda () (- 5 3)))) (f)) 2)
(test-machine '(let ((f (lambda (x) (* x x)))) (f 4)) 16)
(test-machine '(let ((f (lambda (x) x))) (let ((v (+ 3 9))) v)) 12)
(test-machine '(let ((x 123)) (let ((f (lambda () x))) (f))) 123)
(test-machine '(let ((x 123)) (let ((f (lambda () x))) (let ((x 999)) (f)))) 123)
(test-machine '(let ((f (lambda (x) x))) (let ((v (f 999))) v)) 999)
(test-machine '(let ((g (lambda (v) v))) (let ((f (lambda (n) (let ((m (g 123))) (* m n))))) (f 2))) 246)
(test-machine '(let ((f (lambda (x) x))) (let ((u (f 1))) (f 2))) 2)
(test-machine '(let ((f (lambda (y) (let ((x y)) x)))) (let ((z (f "foo"))) (f 1))) 1)
(test-machine '(let ((f (lambda (x) (let ((v x)) v)))) (f 123)) 123)
(test-machine '(let ((f (lambda (x) (let ((i (lambda (a) a))) (i x))))) (let ((z1 (f 123))) (let ((z2 (f #t))) z2))) #t)
(test-machine '((lambda (x) (* x x)) 4) 16)
(test-machine '(let ((f (lambda (g) (g 4)))) (f (lambda (x) (* x x)))) 16)
(test-machine '(let ((f (lambda () (lambda (x) (* x x))))) (let ((g (f))) (g 4))) 16)

(test-machine '(if #t 1 2) 1)
(test-machine '(if #f 1 2) 2)
(test-machine '(if #t (+ 3 5) (- 4 6)) 8)
(test-machine '(if #f (+ 3 5) (- 4 6)) -2)
(test-machine '(let ((f (lambda (x) (* x x)))) (let ((v (f 4))) (if v (f 5) (f 6)))) 25)
(test-machine '(if #t (let ((x 1)) x) (let ((x 2)) x)) 1)
(test-machine '(if #f (let ((x 1)) x) (let ((x 2)) x)) 2)
(test-machine '(let ((x (if #t 1 2))) x) 1)
(test-machine '(let ((x (if #f 1 2))) x) 2)
(test-machine '(let ((x (if #t (cons 1 2) (cons 3 4)))) (car x)) 1)
(test-machine '(let ((x (if #t (cons 1 2) (cons 3 4)))) (cdr x)) 2)
(test-machine '(let ((x (if #f (cons 1 2) (cons 3 4)))) (car x)) 3)
(test-machine '(let ((x (if #f (cons 1 2) (cons 3 4)))) (cdr x)) 4)

(test-machine '(let ((f (lambda (x) (lambda (y) x)))) (let ((v (f 123))) (v 999))) 123)
(test-machine '(let ((f (lambda (x) (lambda (x) x)))) (let ((v (f 123))) (v 999))) 999)
(test-machine '(let ((f (lambda (g) (g 678)))) (let ((id (lambda (x) x))) (f id))) 678)
(test-machine '(let ((f (lambda (g x) (g x)))) (let ((id (lambda (x) x))) (f id 789))) 789)
(test-machine '(let ((f (lambda (g) (lambda (x) (g x))))) (let ((sq (lambda (x) (* x x)))) (let ((ff (f sq))) (ff 11)))) 121)
(test-machine '(let ((f (lambda (n) (let ((x n)) (lambda () x))))) (let ((f0 (f 0))) (let ((f1 (f 1))) (let ((u (f1))) (f0))))) 0)
(test-machine '(let ((g #f)) (let ((f (lambda (n) (let ((x n)) (let ((u (if g 123 (set! g (lambda (y) (set! x y)))))) (lambda () x))))))
                               (let ((f0 (f 0)))
                                 (let ((u (g 9)))
                                   (let ((f1 (f 1)))
                                     (let ((u (f1)))
                                       (f0))))))) 9)



(test-machine '(letrec ((f (lambda (x) (if x "done" (f #t))))) (f #f)) "done")
(test-machine '(letrec ((f (lambda (x) (let ((v (= x 2))) (if v x (let ((u (+ x 1))) (f u))))))) (f 0)) 2)
(test-machine '(letrec ((fac (lambda (n) (let ((v (= n 0))) (if v 1 (let ((m (- n 1))) (let ((w (fac m))) (* n w)))))))) (fac 1)) 1)
(test-machine '(letrec ((fac (lambda (n) (let ((v (= n 0))) (if v 1 (let ((m (- n 1))) (let ((w (fac m))) (* n w)))))))) (fac 3)) 6)
(test-machine '(letrec ((fib (lambda (n) (let ((c (< n 2))) (if c n (let ((n1 (- n 1))) (let ((n2 (- n 2))) (let ((f1 (fib n1))) (let ((f2 (fib n2))) (+ f1 f2)))))))))) (fib 1)) 1)
(test-machine '(letrec ((fib (lambda (n) (let ((c (< n 2))) (if c n (let ((n1 (- n 1))) (let ((f1 (fib n1))) (let ((n2 (- n 2))) (let ((f2 (fib n2))) (+ f1 f2)))))))))) (fib 1)) 1)
(test-machine '(letrec ((fib (lambda (n) (let ((c (< n 2))) (if c n (let ((n1 (- n 1))) (let ((n2 (- n 2))) (let ((f1 (fib n1))) (let ((f2 (fib n2))) (+ f1 f2)))))))))) (fib 3)) 2)
(test-machine '(letrec ((fib (lambda (n) (let ((c (< n 2))) (if c n (let ((n1 (- n 1))) (let ((f1 (fib n1))) (let ((n2 (- n 2))) (let ((f2 (fib n2))) (+ f1 f2)))))))))) (fib 3)) 2)
(test-machine '(letrec ((count (lambda (n) (let ((t (= n 0))) (if t 123 (let ((u (- n 1))) (let ((v (count u))) v))))))) (count 8)) 123)

(test-machine 'x 'FAIL)
(test-machine '(let ((f (lambda () f))) (f)) 'FAIL)

; set!
(test-machine '(let ((x 123)) (let ((u (if #t (set! x 456) (set! x 789)))) x)) 456)
(test-machine '(let ((x 123)) (let ((u (if #f (set! x 456) (set! x 789)))) x)) 789)
(test-machine '(let ((y 999)) (let ((x 123)) (let ((u (if x (set! y 456) (set! y 789)))) y))) 456)
(test-machine '(let ((x 123)) (let ((u (set! x 456))) x)) 456)
(test-machine '(let ((x 123)) (let ((u (set! x 456))) (let ((uu (set! x 789))) x))) 789)
(test-machine '(let ((x 123)) (let ((u (if x (set! x 456) (set! x 789)))) x)) 456)
(test-machine '(let ((x 123)) (let ((u (set! x #f))) (let ((uu (if x (set! x 456) (set! x 789)))) x))) 789)
(test-machine '(let ((x #t)) (let ((f (lambda () (set! x #f)))) (let ((u (f))) x))) #f)
(test-machine '(let ((x #t)) (let ((g (lambda () (set! x #f)))) (let ((f (lambda (h) (h)))) (let ((u (f g))) x)))) #f)
(test-machine '(let ((x 2)) (let ((f (lambda (y) (let ((oldx x)) (let ((_ (set! x y))) oldx))))) (f 1))) 2)
(test-machine '(let ((x 1)) (let ((f (lambda (y) (let ((oldx x)) (let ((_ (set! x y))) oldx))))) (let ((__ (f "foo"))) (f 1)))) "foo")
(test-machine '(let ((x 1)) (let ((f (lambda (y) (let ((oldx x)) (let ((_ (set! x y))) oldx))))) (let ((_ (f 1))) (let ((__ (f "foo"))) (f 1))))) "foo")
(test-machine '(let ((f (lambda (x) (let ((y (set! x "hoho"))) x)))) (f 1)) "hoho")
(test-machine '(let ((f (lambda (x) (let ((y (set! x "hehe"))) x)))) (let ((u (f 1))) (f 2))) "hehe")
(test-machine '(let ((x 123)) (let ((f (lambda (y) y))) (let ((v (set! x 456))) (let ((u (f v))) x)))) 456)
(test-machine '(let ((x 123)) (let ((f (lambda (x) x))) (let ((v (set! x 456))) (let ((u (f v))) x)))) 456)
(test-machine '(let ((x 123)) (let ((f (lambda (x y) x))) (let ((v (set! x 456))) (let ((u (f v 789))) x)))) 456)
(test-machine '(let ((x 123)) (let ((c (set! x 456))) (let ((u (if c 789 0))) x))) 456)
(test-machine '(let ((x 123)) (let ((c (set! x 456))) (let ((u (if c (set! x 789) (set! x 0)))) x))) 789)
(test-machine '(let ((x 1)) (let ((y (+ x 1))) (let ((c (= y 2))) (let ((z (if c (set! x 2) (set! x 3)))) (+ x y))))) 4)
(test-machine '(let ((x 123)) (let ((y (set! x 456))) x)) 456)
(test-machine '(let ((x 123)) (let ((y (set! x 456))) (let ((u (set! x 789))) x))) 789)
(test-machine '(let ((x 123)) (let ((y (set! x 456))) (let ((u (let ((z (set! x 789))) 0))) x))) 789)
(test-machine '(let ((x 123)) (let ((y (set! x 456))) (let ((u (set! x 0))) (let ((uu (let ((z (set! x 789))) 0))) x)))) 789)
(test-machine '(let ((x 123)) (let ((f (lambda () x))) (let ((u (set! x 456))) (f)))) 456)
(test-machine '(let ((id (lambda (x) x)))
                 (let ((f (lambda (g) (g 3))))
                   (let ((u (set! id (lambda (x) 0))))
                     (f id))))
              0)

; cons car cdr
(test-machine '(let ((x (cons 1 2))) (car x)) 1)
(test-machine '(let ((x (cons 1 2))) (cdr x)) 2)
(test-machine '(let ((v (cons 2 3))) (let ((o (cons 1 v))) (let ((w (cdr o))) (car w)))) 2)
(test-machine '(let ((v (cons 2 3))) (let ((o (cons v 1))) (let ((w (car o))) (car w)))) 2)
(test-machine '(let ((v (cons 2 3))) (let ((o (cons 1 v))) (let ((v (cdr o))) (cdr v)))) 3)
(test-machine '(let ((f (lambda (x) (cons x 2)))) (let ((p (f 3))) (car p))) 3)
(test-machine '(let ((f (lambda (x) (cons 1 x)))) (let ((p (f 3))) (cdr p))) 3)
(test-machine '(let ((f (lambda (x) (car x)))) (let ((p (cons 1 2))) (let ((v (f p))) v))) 1)
(test-machine '(let ((f (lambda (x) (cdr x)))) (let ((p (cons 1 2))) (let ((v (f p))) v))) 2)
(test-machine '(let ((p (let ((pp (cons 1 2))) (cons 3 pp)))) (let ((c (cdr p))) (car c))) 1)
(test-machine '(let ((p (let ((pp (cons 1 2))) (cons 3 pp)))) (let ((c (cdr p))) (cdr c))) 2)
(test-machine '(let ((p (cons 1 2)))
                 (let ((g (lambda (p)
                            (car p))))
                   (let ((f (lambda (p)
                              (let ((pp (cdr p)))
                                (g pp)))))
                     (let ((pp (cons 0 p)))
                       (f pp))))) 1)
(test-machine '(let ((g-car (lambda (p)
                           (car p))))
                 (let ((g-cdr (lambda (p)
                                (cdr p))))
                   (let ((p1 (cons 1 2)))
                     (let ((p2 (cons 9 p1)))
                       (let ((f (lambda (p g1 g2)
                                  (let ((ca (car p)))
                                    (let ((cd (cdr p)))
                                      (let ((xx (even? ca)))
                                        (if xx
                                            (g1 cd)
                                            (g2 cd))))))))
                         (f p2 g-car g-cdr)))))) 2)

(test-machine '(let ((builder (lambda (c p x1 x2) 
                                (let ((xx (even? c)))
                                    (if xx
                                        (cons x1 p)
                                        (cons x2 p))))))
                 (let ((p1 (builder 0 '() 1 2)))
                   (let ((p2 (builder 3 p1 4 5)))
                     (let ((p3 (builder 6 p2 7 8)))
                       (let ((c1 (cdr p3)))
                         (let ((c2 (cdr c1)))
                           (let ((c3 (car c2)))
                             c3))))))) 1)
(test-machine '(let ((x 1))
                 (let ((u (set! x 9)))
                   (let ((p (cons x 1)))
                     (car p)))) 9)



; set-car! set-cdr!
(test-machine '(let ((x (cons 1 2)))
                 (let ((u (set-car! x 9)))
                   (car x)))
              9)

(test-machine '(let ((x (cons 1 2)))
                 (let ((u (set-cdr! x 9)))
                   (cdr x)))
              9)

(test-machine '(let ((o (cons 1 2))) (let ((v o)) (let ((u (set-car! v 3))) (car o)))) 3)
(test-machine '(let ((o (cons 1 2))) (let ((f (lambda () o))) (let ((u (set-car! o 3))) (let ((w (f))) (car w))))) 3)

(test-machine '(let ((yy (cons 1 2)))
                 (let ((y (cons 3 yy)))
                   (let ((x (cdr y)))
                     (let ((z (cdr y)))
                       (let ((u (set-car! z 123)))
                         (let ((uu (set-car! x 9)))
                           (let ((zz (cdr y)))
                             (car zz))))))))
              9)

(test-machine '(let ((y (cons 1 2)))
                 (let ((y (cons 3 y)))
                   (let ((x (cdr y)))
                     (let ((z (cdr y)))
                       (let ((u (set-car! z 123)))
                         (let ((u (set-car! x 9)))
                           (let ((z (cdr y)))
                             (car z))))))))
              9)
              

(test-machine '(let ((x (cons 2 3)))
             (let ((y (cons 1 x)))
               (let ((m (cdr y)))
                 (let ((u (set-car! x 9)))
                   (car m)))))
              9)

(test-machine '(let ((z (cons 0 1)))
                 (let ((x (cons 2 3)))
                   (let ((y (cons 1 x)))
                     (let ((yy (cons 4 z)))
                       (let ((u (set! y yy)))
                         (let ((m (cdr y)))
                           (let ((uu (set-car! x 9)))
                             (car m))))))))
              0)

(test-machine '(let ((f (lambda (x)
                          (let ((x1 (car x)))
                            (let ((x2 (cdr x)))
                              (+ x1 x2))))))
                 (let ((cell (cons 2 3)))
                   (let ((u (set-car! cell 0)))
                     (f cell))))
              3)

(test-machine '(let ((x (cons 0 1)))
                 (let ((y (cons 2 3)))
                   (let ((u (set-cdr! x y)))
                     (let ((a (cdr x)))
                       (car a))))) 2)

(test-machine '(let ((x (cons 0 1)))
                  (let ((f (lambda (b)
                             (* b b))))
                    (let ((a (car x)))
                      (f a)))) 0)

(test-machine '(let ((x (cons 0 1)))
                (let ((f (lambda (b)
                           (* b b))))
                  (let ((u (set-car! x 4)))
                    (let ((a (car x)))
                      (f a))))) 16)
              
(test-machine '(let ((x (cons 0 1)))
                (let ((f (lambda (x)
                           (* x x))))
                  (let ((u (set-car! x 4)))
                    (let ((x (car x)))
                      (f x))))) 16)

(test-machine '(let ((z (cons 1 2)))
                (let ((y 3))
                  (let ((u (set! y z)))
                    (let ((x (cons 0 y)))
                      (let ((a (cdr x)))
                        (car a)))))) 1) 

(test-machine '(let ((z 3))
                (let ((y (cons 1 2)))
                  (let ((u (set! y z)))
                    (let ((x (cons 0 y)))
                      (cdr x))))) 3)

(test-machine '(let ((z (cons 1 2)))
                (let ((y 3))
                  (let ((u (set! y z)))
                  (let ((x (cons 0 y)))
                    (let ((v (set-cdr! x 9)))
                      (cdr x)))))) 9)

(test-machine '(let ((z (cons 1 2)))
                (let ((y 3))
                    (let ((f (lambda (t)
                              (set! y t))))
                      (let ((u (f z)))
                        (let ((x (cons 0 y)))
                            (let ((a (cdr x)))
                              (car a))))))) 1)

(test-machine '(let ((p (cons 0 1)))
                 (let ((x (car p)))
                    (let ((u (set-car! p 9)))
                      x))) 0)

(test-machine '(let ((p (cons 0 1)))
                  (let ((v (set-car! p 9)))
                    (let ((x (car p)))
                      (let ((u (set-car! p 4)))
                        x)))) 9)

(test-machine '(let ((f (lambda (a b)
                           (cons a b))))
                  (let ((g (lambda (p)
                              p)))
                    (let ((h (lambda (p)
                               (set-car! p 9))))
                      (let ((p (f 0 1)))
                        (let ((q (g p)))
                          (let ((u (set-car! q 4)))
                            (let ((x1 (car p)))
                              (let ((v (h p)))
                                (let ((x2 (car q)))
                                  (+ x1 x2)))))))))) 13) 

(test-machine '(let ((x (cons 0 1)))
                (let ((y x))
                  (let ((u (set-cdr! x 9)))
                    (cdr x)))) 9)

(test-machine '(let ((x (cons 0 1)))
                (let ((y x))
                  (let ((u (set-cdr! y 9)))
                    (cdr x)))) 9)

(test-machine '(let ((x (cons 0 1)))
                (let ((y x))
                  (let ((u (set-cdr! x 9)))
                    (cdr y)))) 9)

(test-machine '(let ((x (cons 0 1)))
                (let ((y x))
                  (let ((u (set-cdr! y 9)))
                    (cdr y)))) 9)


; quote
(test-machine ''123 '123)
(test-machine ''() '())
(test-machine '(null? '()) #t)
(test-machine '(let ((x '(1))) (car x)) 1)
(test-machine '(let ((x '(1))) (cdr x)) '())
(test-machine '(let ((x '(1 2))) (car x)) 1)
(test-machine '(let ((x '(1 2))) (let ((p (cdr x))) (car p))) 2)
(test-machine '(let ((x '(1 2))) (let ((p (cdr x))) (cdr p))) '())
(test-machine '(let ((x '((1)))) (let ((p (car x))) (car p))) 1)
(test-machine '(let ((x '((1)))) (let ((p (car x))) (cdr p))) '())
(test-machine '(let ((x '((1 2)))) (let ((p (car x))) (let ((q (cdr p))) (car q)))) 2)
(test-machine '(let ((x '((1 2)))) (let ((p (car x))) (let ((q (cdr p))) (cdr q)))) '())
(test-machine '(let ((x '(1 (2)))) (let ((p (cdr x))) (let ((q (car p))) (car q)))) 2)
(test-machine '(let ((x '(1 (2)))) (let ((p (cdr x))) (let ((q (car p))) (cdr q)))) '())
(test-machine '(let ((x '(1 (2 3)))) (let ((p (cdr x))) (let ((q (car p))) (let ((r (cdr q))) (car r))))) 3)
(test-machine '(let ((x '(1 (2 3)))) (let ((p (cdr x))) (let ((q (car p))) (let ((r (cdr q))) (cdr r))))) '())
(test-machine '(let ((x '(1 (2 3)))) (let ((p (cdr x))) (let ((q (car p))) (car q)))) 2)

(test-machine '(let ((x 'a)) (let ((y 'b)) (let ((u (set! x y))) x))) 'b)
(test-machine '(let ((x '(a))) (let ((y '(b))) (let ((u (set! x y))) (car x)))) 'b)
(test-machine '(let ((x '(a))) (let ((u (set-car! x 'b))) (car x))) 'b)
(test-machine '(let ((x '(a))) (let ((u (set-cdr! x 'b))) (cdr x))) 'b)
(test-machine '(let ((x '(a))) (let ((u (set-cdr! x 'b))) (car x))) 'a)

; vectors
(test-machine '(let ((v (make-vector 10 'x))) (vector-ref v 3)) 'x)
(test-machine '(let ((v (make-vector 10 'x))) (let ((u (vector-set! v 3 'y))) (vector-ref v 3))) 'y)
(test-machine '(let ((v (make-vector 10 'x))) (let ((u (vector-set! v 9 'y))) (vector-ref v 3))) 'x)
(test-machine '(let ((v (make-vector 10 'x))) (let ((u (vector-set! v 3 'y))) (vector-ref v 9))) 'x)
(test-machine '(let ((p (cons 1 2)))
  (let ((v (make-vector 10 p)))
    (let ((u (set-cdr! p 9)))
      (let ((e (vector-ref v 3)))
        (cdr e))))) 9)
(test-machine '(let ((v (make-vector 10 'x))) (let ((i 3)) (vector-ref v i))) 'x)
(test-machine '(let ((v (make-vector 10 'x))) (let ((i 3)) (let ((u (vector-set! v i 'y))) (vector-ref v i)))) 'y)
(test-machine '(let ((i 10)) (let ((v (make-vector i 'x))) (vector-ref v 3))) 'x)
; TODO out of bounds stuff

; lazy
(test-machine '(let ((try (lambda (a b)
                            (let ((z (zero? a)))
                              (if z
                                  1
                                  b)))))
                 (let ((p (/ 1 0)))
                   (try 0 p)))
              1)

; (test-machine '(letrec ((ones (cons 1 ones)))
;                  (let ((d1 (cdr ones)))
;                    (car d1)))
;               1) DOESN'T WORK in regular Scheme AND graph-eval (since eval-binding starts lookup in pred state) 


; specific, illustrative, tests
; find-lambda
    ;  '(let ((x 0))
    ;     (let ((f (lambda (g) (g))))
    ;       (let ((x 1))
    ;         (let ((h (lambda () x)))
    ;             (f h)))))
;let-rule    
(test-machine '(let ((f (lambda (x) x))) (let ((v (f 999))) v)) 999)
; final Agda test (termination: how to reduce trace when if/app move fw?)
      ;  '(let ((x 3))
      ;     (let ((g (lambda (y) y)))
      ;       (let ((f (lambda () (g x))))
      ;         (f))))
; p1 (from a paper, once...)
(test-machine '(let ((f (lambda (x)
                 (lambda () 
                      x))))
        (let ((g (f 1)))
            (let ((h (f 2)))
                (g)))) 1)
; p2
(test-machine '(let ((y 999)) (let ((x 123)) (let ((u (if x (set! y 456) (set! y 789)))) y))) 456)
; p3
(test-machine '(let ((x (cons 0 1)))
                (let ((y x))
                  (let ((u (set-cdr! y 9)))
                    (cdr x)))) 9)
; px
(test-machine '(let ((z (cons 0 1))) 
                 (let ((a (cons 2 3)))
                   (let ((b (cons 4 a))) 
                     (let ((c (cons 5 z)))
                       (let ((u (set! b c)))
                         (let ((d (cdr b)))
                           (let ((v (set-car! z 9)))
                             (car d)))))))) 9)
                
;;; INTERESTING CASE is when the update exp of a set! can be non-atomic: first encountered set! when walking back is not the right one!
;;;; THEREFORE: we only allow aes as update exps
;;;(test '(let ((x 123)) (let ((y (set! x (set! x 456)))) x)) 'undefined)
;;;(test '(let ((x 123)) (let ((y (set! x (let ((u (set! x 456))) 789)))) x)) 789)

;;; SCHEME ERROR when setting before init
;;; (test '(letrec ((x (let ((u (set! x 123))) 456))) x) 456)

; 'real' programs
(test-machine (file->value "test/fac.scm") 40320)
(test-machine (file->value "test/fib.scm") 21)
(test-machine (file->value "test/fib-mut.scm") 21)

(define end-time (current-milliseconds))

(printf "~v ms\n" (- end-time start-time))
